#!/bin/bash

# IEN Research Intelligence Platform - Deployment Script
# Supports both local development and VPS deployment with Traefik

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
PROJECT_NAME="ien-research"
DOCKER_IMAGE="ien-research-platform"

# Functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

show_help() {
    cat << EOF
IEN Research Intelligence Platform - Deployment Script

USAGE:
    ./deploy.sh [COMMAND] [OPTIONS]

COMMANDS:
    dev         Start development environment
    prod        Deploy to production (VPS with Traefik)
    build       Build Docker image only
    stop        Stop running containers
    logs        Show container logs
    clean       Clean up containers and images
    help        Show this help message

OPTIONS:
    --domain    Set domain name for production deployment
    --rebuild   Force rebuild of Docker image
    --verbose   Enable verbose output

EXAMPLES:
    ./deploy.sh dev                                 # Start development
    ./deploy.sh prod --domain ien-research.emmi.zone  # Deploy to production
    ./deploy.sh build --rebuild                     # Force rebuild image
    ./deploy.sh logs                                # Show logs
    ./deploy.sh clean                               # Clean up

DEVELOPMENT:
    For local development: npm run dev (recommended)
    For Docker development: ./deploy.sh dev

PRODUCTION:
    Requires Traefik to be running on your VPS
    Update domain in docker-compose.yml before deployment

EOF
}

check_docker() {
    if ! command -v docker &> /dev/null; then
        log_error "Docker is not installed or not in PATH"
        exit 1
    fi

    if ! command -v docker-compose &> /dev/null; then
        log_error "Docker Compose is not installed or not in PATH"
        exit 1
    fi
}

check_traefik() {
    if ! docker network ls | grep -q "traefik"; then
        log_warning "Traefik network not found. Creating it..."
        docker network create traefik || {
            log_error "Failed to create Traefik network. Is Traefik running?"
            exit 1
        }
    fi
}

build_image() {
    local rebuild=${1:-false}
    
    log_info "Building Docker image..."
    
    if [[ "$rebuild" == "true" ]]; then
        log_info "Force rebuilding image..."
        docker-compose build --no-cache
    else
        docker-compose build
    fi
    
    log_success "Docker image built successfully"
}

start_development() {
    log_info "Starting development environment..."
    
    # Check if development compose file exists
    if [[ ! -f "docker-compose.dev.yml" ]]; then
        log_error "docker-compose.dev.yml not found"
        exit 1
    fi
    
    log_info "For hot reloading, consider using: npm run dev"
    log_info "Starting containerized development environment..."
    
    docker-compose -f docker-compose.dev.yml up -d
    
    log_success "Development environment started"
    log_info "Application available at: http://localhost:3000"
    log_info "Use 'docker-compose -f docker-compose.dev.yml logs -f' to view logs"
}

start_production() {
    local domain=${1:-""}
    
    log_info "Deploying to production with Traefik..."
    
    if [[ -z "$domain" ]]; then
        log_warning "No domain specified. Please update docker-compose.yml with your domain"
        log_info "Example: ien-research.yourdomain.com"
    else
        log_info "Using domain: $domain"
        # Update domain in docker-compose.yml (basic sed replacement)
        sed -i.bak "s/ien-research\.yourdomain\.com/$domain/g" docker-compose.yml
        log_info "Updated docker-compose.yml with domain: $domain"
    fi
    
    check_traefik
    
    # Deploy with production compose
    docker-compose up -d
    
    log_success "Production deployment completed"
    if [[ -n "$domain" ]]; then
        log_info "Application will be available at: https://$domain"
    fi
    log_info "SSL certificate will be automatically generated by Traefik/Let's Encrypt"
}

show_logs() {
    log_info "Showing container logs..."
    
    if docker-compose ps | grep -q "ien-research"; then
        docker-compose logs -f
    elif docker-compose -f docker-compose.dev.yml ps | grep -q "ien-research"; then
        docker-compose -f docker-compose.dev.yml logs -f
    else
        log_warning "No running containers found"
    fi
}

stop_containers() {
    log_info "Stopping containers..."
    
    # Stop production containers
    if docker-compose ps | grep -q "ien-research"; then
        docker-compose down
        log_success "Production containers stopped"
    fi
    
    # Stop development containers
    if docker-compose -f docker-compose.dev.yml ps | grep -q "ien-research"; then
        docker-compose -f docker-compose.dev.yml down
        log_success "Development containers stopped"
    fi
}

clean_up() {
    log_info "Cleaning up containers and images..."
    
    stop_containers
    
    # Remove images
    docker images | grep "$DOCKER_IMAGE" | awk '{print $3}' | xargs -r docker rmi -f
    
    # Clean up unused resources
    docker system prune -f
    
    log_success "Cleanup completed"
}

# Main script logic
main() {
    local command=${1:-"help"}
    local domain=""
    local rebuild=false
    local verbose=false
    
    # Parse arguments
    shift || true
    while [[ $# -gt 0 ]]; do
        case $1 in
            --domain)
                domain="$2"
                shift 2
                ;;
            --rebuild)
                rebuild=true
                shift
                ;;
            --verbose)
                verbose=true
                set -x
                shift
                ;;
            *)
                log_error "Unknown option: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    # Check Docker installation
    check_docker
    
    # Execute command
    case $command in
        dev|development)
            start_development
            ;;
        prod|production)
            build_image "$rebuild"
            start_production "$domain"
            ;;
        build)
            build_image "$rebuild"
            ;;
        logs)
            show_logs
            ;;
        stop)
            stop_containers
            ;;
        clean)
            clean_up
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            log_error "Unknown command: $command"
            show_help
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"